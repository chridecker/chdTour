@page "/person"

@using chdTour.DataAccess.Contracts.Domain;
@using chdTour.DataAccess.Contracts.Interfaces.Repositories;

@inject IPersonRepository repo

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (persons == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@this.persons" Hover="true">
        <HeaderContent>
            <MudTh>Vorname</MudTh>
            <MudTh>Nachname</MudTh>
            <MudTh><MudIcon Icon="s" /> </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.FirstName</MudTd>
            <MudTd>@context.LastName</MudTd>
            <MudTd><MudIconButton Icon="@Icons.Material.Filled.Delete" ButtonType="ButtonType.Button" OnClick="()=>Delete(context)"></MudIconButton></MudTd>
        </RowTemplate>
    </MudTable>
    <MudTextField @bind-Value="vorname" />
    <MudTextField @bind-Value="nachname" />
    <MudIconButton Icon="@Icons.Material.Filled.Save" @onclick="CreateNew">Neu</MudIconButton>
}
@code {
    private IEnumerable<Person> persons;

    private CancellationTokenSource _cts = new();

    private string vorname;
    private string nachname;

    protected override async Task OnInitializedAsync()
    {
        persons = await repo.GetAllAsync(_cts.Token);
    }

    private async Task CreateNew()
    {
        await repo.AddAsync(new Person
            {
                Created = DateTime.Now,
                FirstName = vorname,
                LastName = nachname
            }, _cts.Token);
        vorname = string.Empty;
        nachname = string.Empty;
    }
    private async Task Delete(Person p)
    {
        await repo.DeleteAsync(p, _cts.Token);
    }
}
