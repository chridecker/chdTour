@using Microsoft.EntityFrameworkCore
@inject ITourTypeRepository tourTypeRepo
@inject ITourPartnerRepository tourPartnerRepo
@inject ITourAttachementRepository tourAttachementRepo
@inherits BaseEditForm<ITourRepository,Tour,Guid>

<EditFormLayout TRepo="ITourRepository" T="Tour" PK="Guid" @ref="this._layout" Value="this.Value" OnBack="this.OnBack">
    <EditFormText TRepo="ITourRepository" T="Tour" PK="Guid" Value="this.Value" Property="x => x.Title" Title="Titel" />
    <EditFormText TRepo="ITourRepository" T="Tour" PK="Guid" Value="this.Value" Property="x => x.Location" Title="Ort/Gebiet" />
    <EditFormDateTime TRepo="ITourRepository" TValue="DateTime" T="Tour" PK="Guid" Value="this.Value" Property="x => x.TourDate" Title="Datum" />
    <EditFormNumber TValue="int" TRepo="ITourRepository" T="Tour" PK="Guid" Value="this.Value" Property="x => x.Pitches" Title="SL" />

    <EditFormSearch TRepo="ITourRepository" T="Tour" PK="Guid" TValue="TourType" TFavoriteObject="Guid"
                    Name="x => x?.Title" Property="x => x.TourType" Title="Typ" Value="this.Value" Values="this._tourTypeLst"
                    OnChange="this.Changed" />

    <EditFormSearch TRepo="ITourRepository" T="Tour" PK="Guid" TValue="Grade" TFavoriteObject="Guid"
                    Name="x => x?.Title" Property="x => x.Grade" Title="Grad" Value="this.Value" Values="_grades"
                    OnChange="this.Changed" />

    <EditMultiAssignment Title="Partner" TRepo="ITourPartnerRepository" PK="Guid" TParentRepo="ITourRepository" T="TourPartner" Token="this.Token"
                         TParent="Tour"
                         TForm="TourPartnerEdit"
                         OneAssignedProperty="x => x.TourObj"
                         EntityName="Partner"
                         OnChange="this.Changed"
                         ParentEntity="this.Value" CollectionProperty="x => x.TourPartners">
        <HeaderContent>
            <TableHead>Name</TableHead>
        </HeaderContent>
        <RowTemplate Context="tourPartner">
            <TableData>@tourPartner.PersonObj.FullName</TableData>
        </RowTemplate>
    </EditMultiAssignment>

    <EditFormTextArea TRepo="ITourRepository" T="Tour" PK="Guid" Value="this.Value" Property="x => x.Comment" Title="Details" />
    <EditFormTextArea TRepo="ITourRepository" T="Tour" PK="Guid" Value="this.Value" Property="x => x.Description" Title="weitere Beschreibung" />

    <EditMultiAssignment Title="Bild" TRepo="ITourImageRepository" PK="Guid" TParentRepo="ITourRepository" T="TourImage" Token="this.Token"
                         TParent="Tour"
                         TForm="TourImageEdit"
                         OneAssignedProperty="x => x.Tour"
                         EntityName="Bild"
                         OnChange="this.Changed"
                         ParentEntity="this.Value" CollectionProperty="x => x.Images">
        <HeaderContent>
            <TableHead>Title</TableHead>
            <TableHead></TableHead>
        </HeaderContent>
        <RowTemplate Context="att">
            <TableData>@att.Title</TableData>
            <TableData><IconButton FAClass="eye" OnClick="async ()=> await this.ShowImage(att)" /></TableData>
        </RowTemplate>
    </EditMultiAssignment>

    <EditMultiAssignment Title="Anhang" PK="Guid" TRepo="ITourAttachementRepository" TParentRepo="ITourRepository" T="TourAttachement" Token="this.Token"
                         TParent="Tour"
                         TForm="TourAttachementEdit"
                         OneAssignedProperty="x => x.Tour"
                         EntityName="Anhang"
                         OnChange="this.Changed"
                         ParentEntity="this.Value" CollectionProperty="x => x.Attachements">
        <HeaderContent>
            <TableHead>Title</TableHead>
        </HeaderContent>
        <RowTemplate Context="att">
            <TableData>@att.Title</TableData>
        </RowTemplate>
    </EditMultiAssignment>

</EditFormLayout>



@code {
    List<TourType> _tourTypeLst;
    List<Grade> _grades = [];

    protected async override Task OnInitializedAsync()
    {
        this._tourTypeLst = (await this.tourTypeRepo.FindAll(this.Token)).ToList();
        if (this.Value.TourType?.GradeScala is not null)
        {
            this._grades = this.Value.TourType.GradeScala.Grades.ToList();
        }
        await base.OnInitializedAsync();
    }

    private async Task ShowImage(TourImage image)
    {
        var options = new ModalOptions
            {
                HideHeader = true,
                OverlayCustomClass = "overly-tour-image-view",
                Position = ModalPosition.Middle,
                Size = ModalSize.ExtraLarge,
            };
        var param = new ModalParameters();
        param.Add(nameof(TourImageView.Attachment), image);
        await this._modal.Show<TourImageView>(param, options).Result;
    }

    private void Changed(TourType type)
    {
        this.Value.TourTypeId = type.Id;
        if (this.Value.TourType?.GradeScala is not null)
        {
            this._grades = this.Value.TourType.GradeScala.Grades.ToList();
        }
    }
    private void Changed(Grade grade)
    {
        this.Value.GradeId = grade.Id;
    }

    private async Task Changed(TourPartner tourPartner)
    {
        tourPartner.TourId = this.Value.Id;
    }
    private async Task Changed(TourAttachement attachement)
    {
        attachement.TourId = this.Value.Id;
    }

    private async Task Changed(TourImage attachement)
    {
        attachement.TourId = this.Value.Id;
    }

}