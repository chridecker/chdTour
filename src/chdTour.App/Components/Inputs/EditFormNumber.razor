@using System.Globalization
@using chdTour.App.Components.Base
@using chdTour.DataAccess.Contracts.Interfaces.Repositories.Base
@typeparam TRepo where TRepo : IBaseRepository<T>
@typeparam T where T : class
@typeparam TValue
@inherits BaseEditFormInput<TRepo,T, TValue>

<EditFormInput Title="@this.Title">
    <input type="number" value="@this.ConvertValue(this.GetValue())" @onchange="this.Changed" disabled="@this.Disabled" />
</EditFormInput>

@code {
    private async Task Changed(ChangeEventArgs args)
    {
        if (!BindConverter.TryConvertTo<TValue>(this.ConvertValue(args.Value), CultureInfo.InvariantCulture, out var result)) { return; }

        await this.ValueChanged(result);
    }

    private object ConvertValue(object value) => (value is not null) switch
    {
        true  when typeof(TValue) == typeof(decimal) => value.ToString().Replace(",","."),
        _ => value
    };
}
