@using chd.UI.Base.Contracts.Enum
@using chdTour.App.Components.Base
@using chdTour.App.Implementations
@using chdTour.DataAccess.Contracts.Domain.Base
@using chdTour.DataAccess.Contracts.Interfaces.Repositories.Base
@inject ICustomFilePicker filePicker
@typeparam TRepo where TRepo : IBaseRepository<T>
@typeparam T where T : BaseAttachmentEntity<Guid>
@inherits BaseEditFormInput<TRepo, T, byte[]>

<EditFormInput Title="@this.Title">
    <EditFormDisplayAttachment Attachment="this.Value" />
    <IconButton ButtonStyle="EButtonStyle.Secondary" FAClass="paperclip" OnClick="async ()=>await PickFile()">Datei auswählen</IconButton>
</EditFormInput>

@code {
    private bool _isImage => this.Type.StartsWith("image");

    [Parameter] public EventCallback<string> TypeChanged { get; set; }

    [Parameter] public string Type { get; set; }
    [Parameter] public CancellationToken Token { get; set; } = CancellationToken.None;

    private async Task PickFile()
    {
        var stream = await this.filePicker.PickFile(this.Token);
        if (stream.Length == 0) { return; }

        if (!this.ValidateType(filePicker.ContentType))
        {
            return;
        }

        this.Type = filePicker.ContentType;
        await this.TypeChanged.InvokeAsync(Type);
        await this.ValueChanged(stream);
    }

    private bool ValidateType(string type) => type switch
    {
        "image/png" => true,
        "image/jpeg" => true,
        "application/pdf" => true,
        _ => false
    };
}